version: '3.8'

services:
  web:
    build: .
    restart: always
    networks:
      - app_network
    ports:
      - "0.0.0.0:5000:5000"
    env_file:
      - .env
    depends_on:
      - db
    volumes:
      - ./images:/app/images
      - ./static:/app/static
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: >
      sh -c "
        echo 'Waiting for postgres...' &&
        while ! nc -z db 5432; do
          sleep 1
        done &&
        echo 'PostgreSQL started' &&
        gunicorn --bind 0.0.0.0:5000 index:app
      "

  db:
    image: postgres:13-alpine
    restart: always
    networks:
      - app_network
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  nginx:
    image: nginx:alpine
    restart: always
    networks:
      - app_network
    ports:
      - "0.0.0.0:8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./static:/static
    depends_on:
      - web

networks:
  app_network:
    driver: bridge